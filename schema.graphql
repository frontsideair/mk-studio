schema {
  query: RootQuery
}

"""Field is a "raw" JSON alias for a different field"""
directive @jsonAlias(
  """Source field name"""
  for: String!
) on FIELD_DEFINITION

"""Field references one or more documents"""
directive @reference on FIELD_DEFINITION

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type RootQuery {
  Settings(
    """Settings document ID"""
    id: ID!
  ): Settings
  Menu(
    """Menu document ID"""
    id: ID!
  ): Menu
  Page(
    """Page document ID"""
    id: ID!
  ): Page
  Client(
    """Client document ID"""
    id: ID!
  ): Client
  Author(
    """Author document ID"""
    id: ID!
  ): Author
  SanityImageAsset(
    """SanityImageAsset document ID"""
    id: ID!
  ): SanityImageAsset
  SanityFileAsset(
    """SanityFileAsset document ID"""
    id: ID!
  ): SanityFileAsset
  Document(
    """Document document ID"""
    id: ID!
  ): Document
  allSettings(
    where: SettingsFilter
    sort: [SettingsSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [Settings!]!
  allMenu(
    where: MenuFilter
    sort: [MenuSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [Menu!]!
  allPage(
    where: PageFilter
    sort: [PageSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [Page!]!
  allClient(
    where: ClientFilter
    sort: [ClientSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [Client!]!
  allAuthor(
    where: AuthorFilter
    sort: [AuthorSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [Author!]!
  allSanityImageAsset(
    where: SanityImageAssetFilter
    sort: [SanityImageAssetSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [SanityImageAsset!]!
  allSanityFileAsset(
    where: SanityFileAssetFilter
    sort: [SanityFileAssetSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [SanityFileAsset!]!
  allDocument(
    where: DocumentFilter
    sort: [DocumentSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [Document!]!
}

type Settings implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String

  """This field is the title of your blog."""
  title: String
}

"""A Sanity document"""
interface Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Menu implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: Slug
  items: [NavigationSection]
}

type Slug {
  _key: String
  _type: String
  current: String
  source: String
}

type NavigationSection {
  _key: String
  _type: String
  title: String
  target: Page
  links: [NavLink]
}

type Page implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String
  title: String
  slug: Slug
  contentRaw: JSON
  excerpt: String
  coverImage: Image
  date: DateTime
  author: Author
  seo: Seo
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Image {
  _key: String
  _type: String
  asset: SanityImageAsset
  hotspot: SanityImageHotspot
  crop: SanityImageCrop
}

type SanityImageAsset implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String
  originalFilename: String
  label: String
  title: String
  description: String
  altText: String
  sha1hash: String
  extension: String
  mimeType: String
  size: Float
  assetId: String
  uploadId: String
  path: String
  url: String
  metadata: SanityImageMetadata
  source: SanityAssetSourceData
}

type SanityImageMetadata {
  _key: String
  _type: String
  location: Geopoint
  dimensions: SanityImageDimensions
  palette: SanityImagePalette
  lqip: String
  blurHash: String
  hasAlpha: Boolean
  isOpaque: Boolean
}

type Geopoint {
  _key: String
  _type: String
  lat: Float
  lng: Float
  alt: Float
}

type SanityImageDimensions {
  _key: String
  _type: String
  height: Float
  width: Float
  aspectRatio: Float
}

type SanityImagePalette {
  _key: String
  _type: String
  darkMuted: SanityImagePaletteSwatch
  lightVibrant: SanityImagePaletteSwatch
  darkVibrant: SanityImagePaletteSwatch
  vibrant: SanityImagePaletteSwatch
  dominant: SanityImagePaletteSwatch
  lightMuted: SanityImagePaletteSwatch
  muted: SanityImagePaletteSwatch
}

type SanityImagePaletteSwatch {
  _key: String
  _type: String
  background: String
  foreground: String
  population: Float
  title: String
}

type SanityAssetSourceData {
  _key: String
  _type: String

  """A canonical name for the source this asset is originating from"""
  name: String

  """
  The unique ID for the asset within the originating source so you can programatically find back to it
  """
  id: String

  """
  A URL to find more information about this asset in the originating source
  """
  url: String
}

type SanityImageHotspot {
  _key: String
  _type: String
  x: Float
  y: Float
  height: Float
  width: Float
}

type SanityImageCrop {
  _key: String
  _type: String
  top: Float
  bottom: Float
  left: Float
  right: Float
}

type Author implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String
  name: String
  picture: Image
}

type Seo {
  _key: String
  _type: String

  """Title used for search engines and browsers"""
  metaTitle: String

  """Description for search engines"""
  metaDesc: String

  """Title used for social sharing cards"""
  shareTitle: String

  """Description used for social sharing cards"""
  shareDesc: String
  shareGraphic: Image
}

type NavLink {
  _key: String
  _type: String

  """No target article turns the item into a subheading."""
  target: Page

  """Override title from the target page."""
  title: String
  children: [NavLink]
}

type Client implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String
  name: String
  slug: Slug
  logo: Image
  website: String
}

type SanityFileAsset implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String
  originalFilename: String
  label: String
  title: String
  description: String
  altText: String
  sha1hash: String
  extension: String
  mimeType: String
  size: Float
  assetId: String
  path: String
  url: String
  source: SanityAssetSourceData
}

input SettingsFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  title: StringFilter
}

input Sanity_DocumentFilter {
  """All documents referencing the given document ID."""
  references: ID

  """All documents that are drafts."""
  is_draft: Boolean
}

input IDFilter {
  """Checks if the value is equal to the given input."""
  eq: ID

  """Checks if the value is not equal to the given input."""
  neq: ID

  """Checks if the value matches the given word/words."""
  matches: ID
  in: [ID!]
  nin: [ID!]
}

input StringFilter {
  """Checks if the value is equal to the given input."""
  eq: String

  """Checks if the value is not equal to the given input."""
  neq: String

  """Checks if the value matches the given word/words."""
  matches: String
  in: [String!]
  nin: [String!]
}

input DatetimeFilter {
  """Checks if the value is equal to the given input."""
  eq: DateTime

  """Checks if the value is not equal to the given input."""
  neq: DateTime

  """Checks if the value is greater than the given input."""
  gt: DateTime

  """Checks if the value is greater than or equal to the given input."""
  gte: DateTime

  """Checks if the value is lesser than the given input."""
  lt: DateTime

  """Checks if the value is lesser than or equal to the given input."""
  lte: DateTime
}

input SettingsSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  title: SortOrder
}

enum SortOrder {
  """Sorts on the value in ascending order."""
  ASC

  """Sorts on the value in descending order."""
  DESC
}

input MenuFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  title: StringFilter
  slug: SlugFilter
}

input SlugFilter {
  _key: StringFilter
  _type: StringFilter
  current: StringFilter
  source: StringFilter
}

input MenuSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  title: SortOrder
  slug: SlugSorting
}

input SlugSorting {
  _key: SortOrder
  _type: SortOrder
  current: SortOrder
  source: SortOrder
}

input PageFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  title: StringFilter
  slug: SlugFilter
  excerpt: StringFilter
  coverImage: ImageFilter
  date: DatetimeFilter
  author: AuthorFilter
  seo: SeoFilter
}

input ImageFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityImageAssetFilter
  hotspot: SanityImageHotspotFilter
  crop: SanityImageCropFilter
}

input SanityImageAssetFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  originalFilename: StringFilter
  label: StringFilter
  title: StringFilter
  description: StringFilter
  altText: StringFilter
  sha1hash: StringFilter
  extension: StringFilter
  mimeType: StringFilter
  size: FloatFilter
  assetId: StringFilter
  uploadId: StringFilter
  path: StringFilter
  url: StringFilter
  metadata: SanityImageMetadataFilter
  source: SanityAssetSourceDataFilter
}

input FloatFilter {
  """Checks if the value is equal to the given input."""
  eq: Float

  """Checks if the value is not equal to the given input."""
  neq: Float

  """Checks if the value is greater than the given input."""
  gt: Float

  """Checks if the value is greater than or equal to the given input."""
  gte: Float

  """Checks if the value is lesser than the given input."""
  lt: Float

  """Checks if the value is lesser than or equal to the given input."""
  lte: Float
}

input SanityImageMetadataFilter {
  _key: StringFilter
  _type: StringFilter
  location: GeopointFilter
  dimensions: SanityImageDimensionsFilter
  palette: SanityImagePaletteFilter
  lqip: StringFilter
  blurHash: StringFilter
  hasAlpha: BooleanFilter
  isOpaque: BooleanFilter
}

input GeopointFilter {
  _key: StringFilter
  _type: StringFilter
  lat: FloatFilter
  lng: FloatFilter
  alt: FloatFilter
}

input SanityImageDimensionsFilter {
  _key: StringFilter
  _type: StringFilter
  height: FloatFilter
  width: FloatFilter
  aspectRatio: FloatFilter
}

input SanityImagePaletteFilter {
  _key: StringFilter
  _type: StringFilter
  darkMuted: SanityImagePaletteSwatchFilter
  lightVibrant: SanityImagePaletteSwatchFilter
  darkVibrant: SanityImagePaletteSwatchFilter
  vibrant: SanityImagePaletteSwatchFilter
  dominant: SanityImagePaletteSwatchFilter
  lightMuted: SanityImagePaletteSwatchFilter
  muted: SanityImagePaletteSwatchFilter
}

input SanityImagePaletteSwatchFilter {
  _key: StringFilter
  _type: StringFilter
  background: StringFilter
  foreground: StringFilter
  population: FloatFilter
  title: StringFilter
}

input BooleanFilter {
  """Checks if the value is equal to the given input."""
  eq: Boolean

  """Checks if the value is not equal to the given input."""
  neq: Boolean
}

input SanityAssetSourceDataFilter {
  _key: StringFilter
  _type: StringFilter
  name: StringFilter
  id: StringFilter
  url: StringFilter
}

input SanityImageHotspotFilter {
  _key: StringFilter
  _type: StringFilter
  x: FloatFilter
  y: FloatFilter
  height: FloatFilter
  width: FloatFilter
}

input SanityImageCropFilter {
  _key: StringFilter
  _type: StringFilter
  top: FloatFilter
  bottom: FloatFilter
  left: FloatFilter
  right: FloatFilter
}

input AuthorFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  name: StringFilter
  picture: ImageFilter
}

input SeoFilter {
  _key: StringFilter
  _type: StringFilter
  metaTitle: StringFilter
  metaDesc: StringFilter
  shareTitle: StringFilter
  shareDesc: StringFilter
  shareGraphic: ImageFilter
}

input PageSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  title: SortOrder
  slug: SlugSorting
  excerpt: SortOrder
  coverImage: ImageSorting
  date: SortOrder
  seo: SeoSorting
}

input ImageSorting {
  _key: SortOrder
  _type: SortOrder
  hotspot: SanityImageHotspotSorting
  crop: SanityImageCropSorting
}

input SanityImageHotspotSorting {
  _key: SortOrder
  _type: SortOrder
  x: SortOrder
  y: SortOrder
  height: SortOrder
  width: SortOrder
}

input SanityImageCropSorting {
  _key: SortOrder
  _type: SortOrder
  top: SortOrder
  bottom: SortOrder
  left: SortOrder
  right: SortOrder
}

input SeoSorting {
  _key: SortOrder
  _type: SortOrder
  metaTitle: SortOrder
  metaDesc: SortOrder
  shareTitle: SortOrder
  shareDesc: SortOrder
  shareGraphic: ImageSorting
}

input ClientFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  name: StringFilter
  slug: SlugFilter
  logo: ImageFilter
  website: StringFilter
}

input ClientSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  name: SortOrder
  slug: SlugSorting
  logo: ImageSorting
  website: SortOrder
}

input AuthorSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  name: SortOrder
  picture: ImageSorting
}

input SanityImageAssetSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  originalFilename: SortOrder
  label: SortOrder
  title: SortOrder
  description: SortOrder
  altText: SortOrder
  sha1hash: SortOrder
  extension: SortOrder
  mimeType: SortOrder
  size: SortOrder
  assetId: SortOrder
  uploadId: SortOrder
  path: SortOrder
  url: SortOrder
  metadata: SanityImageMetadataSorting
  source: SanityAssetSourceDataSorting
}

input SanityImageMetadataSorting {
  _key: SortOrder
  _type: SortOrder
  location: GeopointSorting
  dimensions: SanityImageDimensionsSorting
  palette: SanityImagePaletteSorting
  lqip: SortOrder
  blurHash: SortOrder
  hasAlpha: SortOrder
  isOpaque: SortOrder
}

input GeopointSorting {
  _key: SortOrder
  _type: SortOrder
  lat: SortOrder
  lng: SortOrder
  alt: SortOrder
}

input SanityImageDimensionsSorting {
  _key: SortOrder
  _type: SortOrder
  height: SortOrder
  width: SortOrder
  aspectRatio: SortOrder
}

input SanityImagePaletteSorting {
  _key: SortOrder
  _type: SortOrder
  darkMuted: SanityImagePaletteSwatchSorting
  lightVibrant: SanityImagePaletteSwatchSorting
  darkVibrant: SanityImagePaletteSwatchSorting
  vibrant: SanityImagePaletteSwatchSorting
  dominant: SanityImagePaletteSwatchSorting
  lightMuted: SanityImagePaletteSwatchSorting
  muted: SanityImagePaletteSwatchSorting
}

input SanityImagePaletteSwatchSorting {
  _key: SortOrder
  _type: SortOrder
  background: SortOrder
  foreground: SortOrder
  population: SortOrder
  title: SortOrder
}

input SanityAssetSourceDataSorting {
  _key: SortOrder
  _type: SortOrder
  name: SortOrder
  id: SortOrder
  url: SortOrder
}

input SanityFileAssetFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  originalFilename: StringFilter
  label: StringFilter
  title: StringFilter
  description: StringFilter
  altText: StringFilter
  sha1hash: StringFilter
  extension: StringFilter
  mimeType: StringFilter
  size: FloatFilter
  assetId: StringFilter
  path: StringFilter
  url: StringFilter
  source: SanityAssetSourceDataFilter
}

input SanityFileAssetSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  originalFilename: SortOrder
  label: SortOrder
  title: SortOrder
  description: SortOrder
  altText: SortOrder
  sha1hash: SortOrder
  extension: SortOrder
  mimeType: SortOrder
  size: SortOrder
  assetId: SortOrder
  path: SortOrder
  url: SortOrder
  source: SanityAssetSourceDataSorting
}

input DocumentFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
}

input DocumentSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
}

type Block {
  _key: String
  _type: String
  children: [Span]
  style: String
  list: String
}

type Span {
  _key: String
  _type: String
  marks: [String]
  text: String
}

type CrossDatasetReference {
  _key: String
  _type: String
  _ref: String
  _weak: Boolean
  _dataset: String
  _projectId: String
}

type File {
  _key: String
  _type: String
  asset: SanityFileAsset
}

type Accordions {
  _key: String
  _type: String
  items: [Accordion]
}

type Accordion {
  _key: String
  _type: String
  title: String
  contentRaw: JSON
}

type AnimatedDivider {
  _key: String
  _type: String
  title: String
}

type NavPage {
  _key: String
  _type: String

  """Display Text"""
  title: String
  page: Page
}

type HorizontalRule {
  _key: String
  _type: String
  horizontalRule: String
}

input IntFilter {
  """Checks if the value is equal to the given input."""
  eq: Int

  """Checks if the value is not equal to the given input."""
  neq: Int

  """Checks if the value is greater than the given input."""
  gt: Int

  """Checks if the value is greater than or equal to the given input."""
  gte: Int

  """Checks if the value is lesser than the given input."""
  lt: Int

  """Checks if the value is lesser than or equal to the given input."""
  lte: Int
}

input DateFilter {
  """Checks if the value is equal to the given input."""
  eq: Date

  """Checks if the value is not equal to the given input."""
  neq: Date

  """Checks if the value is greater than the given input."""
  gt: Date

  """Checks if the value is greater than or equal to the given input."""
  gte: Date

  """Checks if the value is lesser than the given input."""
  lt: Date

  """Checks if the value is lesser than or equal to the given input."""
  lte: Date
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input CrossDatasetReferenceFilter {
  _key: StringFilter
  _type: StringFilter
  _ref: StringFilter
  _weak: BooleanFilter
  _dataset: StringFilter
  _projectId: StringFilter
}

input FileFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityFileAssetFilter
}

input AccordionsFilter {
  _key: StringFilter
  _type: StringFilter
}

input AccordionFilter {
  _key: StringFilter
  _type: StringFilter
  title: StringFilter
}

input AnimatedDividerFilter {
  _key: StringFilter
  _type: StringFilter
  title: StringFilter
}

input NavLinkFilter {
  _key: StringFilter
  _type: StringFilter
  target: PageFilter
  title: StringFilter
}

input NavPageFilter {
  _key: StringFilter
  _type: StringFilter
  title: StringFilter
  page: PageFilter
}

input NavigationSectionFilter {
  _key: StringFilter
  _type: StringFilter
  title: StringFilter
  target: PageFilter
}

input HorizontalRuleFilter {
  _key: StringFilter
  _type: StringFilter
  horizontalRule: StringFilter
}

input CrossDatasetReferenceSorting {
  _key: SortOrder
  _type: SortOrder
  _ref: SortOrder
  _weak: SortOrder
  _dataset: SortOrder
  _projectId: SortOrder
}

input FileSorting {
  _key: SortOrder
  _type: SortOrder
}

input AccordionsSorting {
  _key: SortOrder
  _type: SortOrder
}

input AccordionSorting {
  _key: SortOrder
  _type: SortOrder
  title: SortOrder
}

input AnimatedDividerSorting {
  _key: SortOrder
  _type: SortOrder
  title: SortOrder
}

input NavLinkSorting {
  _key: SortOrder
  _type: SortOrder
  title: SortOrder
}

input NavPageSorting {
  _key: SortOrder
  _type: SortOrder
  title: SortOrder
}

input NavigationSectionSorting {
  _key: SortOrder
  _type: SortOrder
  title: SortOrder
}

input HorizontalRuleSorting {
  _key: SortOrder
  _type: SortOrder
  horizontalRule: SortOrder
}
